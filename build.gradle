// ORG.CHRONOS/build.gradle     --- TOP LEVEL GRADLE FILE ---

buildscript {
	repositories {
	  jcenter()
	}
	dependencies {
	  classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
       // Apache Gremlin snapshots
       url "https://repository.apache.org/content/groups/snapshots"
    }
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	apply plugin: 'findbugs'
	apply plugin: 'jacoco'
	apply plugin: 'maven'
	apply plugin: 'signing'
	
	// configure the group and version for this project
	group = 'com.github.martinhaeusler'
	version = '0.9.1'

	// java version
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	jar {
		manifest {
			attributes 'Implementation-Version': version
		}
	}
	
	test {
		exclude '**/_suite/**'
		testLogging {
			exceptionFormat = 'full'
    	}
    }
	
	javadoc{
		failOnError = false
	}
	
	// dependency versions
	ext {
		// build specific attributes
		isJenkins = System.getenv('JENKINS_URL') != null
		buildNumber = System.getenv("BUILD_NUMBER") ?: "LOCAL_BUILD"
		buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')
		buildVersion = project.version 

		// git specific attributes
		gitBranch = project.isJenkins ? System.getenv("BRANCH_NAME") : "NO_BRANCH"

		// maven specific attributes for publishing
		mavenVersion = "${project.buildVersion}"
	
		// standard libraries
		guavaVersion = '19.0' // was 18.0
		commonsLang3Version = '3.4'
		commonsCollectionsVersion = '4.1'
		commonsIoVersion = '2.4'
		commonsConfigurationVersion = '1.10'
		
		// Logging
		slf4jVersion = '1.7.12'
		logbackVersion = '1.1.3'
		
		// Apache Tinkerpop
		tinkerpopVersion = '3.1.0-incubating' // was 3.1.1-SNAPSHOT, was 3.0.2-incubating
		tinkergraphVersion = '3.0.0.M7'
		
		// Storage Backends
		mapDBVersion = '2.0-beta13' // was 2.0-beta11, was 2.0-beta6, was 1.0.8
		luceneVersion = '5.5.0' // was 5.3.1
		h2Version = '1.4.187'
		tuplVersion = '1.3.11' // was '1.3.4.0'
		
		// Additional JDBC resources
		c3p0Version = '0.9.5.1'
		
		// Object Serialization
		kryoVersion = '3.0.3'  // was 2.24.0
		xstreamVersion = '1.4.9'
		
		// Testing
		jUnitVersion = '4.12'
		
		// code coverage & quality assurance tools
		jacocoVersion = '0.7.6.201602180812' // was '0.7.1.201405082137'
		findbugsVersion = '3.0.0'
	}

	repositories {
		// default repositories for all subprojects
		mavenCentral()
		// Apache Gremlin snapshots
		maven {
       	    url "https://repository.apache.org/content/groups/snapshots"
    	}
	}

	dependencies {
	    // Standard Library Dependencies
		compile("com.google.guava:guava:${project.guavaVersion}")
		compile("org.apache.commons:commons-lang3:${project.commonsLang3Version}")
		compile("org.apache.commons:commons-collections4:${project.commonsCollectionsVersion}")
		compile("commons-io:commons-io:${project.commonsIoVersion}")
		compile("commons-configuration:commons-configuration:${project.commonsConfigurationVersion}")

		// Logging Dependencies
		compile("org.slf4j:slf4j-api:${project.slf4jVersion}")
		compile("org.slf4j:jcl-over-slf4j:${project.slf4jVersion}")
		compile("org.slf4j:jul-to-slf4j:${project.slf4jVersion}")
		compile("ch.qos.logback:logback-classic:${project.logbackVersion}")

        // Testing Dependencies
		testCompile("junit:junit:${project.jUnitVersion}")
	}
	
	jacoco {
    	toolVersion = "${project.jacocoVersion}"
	}
	
	jacocoTestReport {
		reports {
	        xml {
	            enabled true // coveralls plugin depends on xml format report
	        }
	        html {
	            enabled true
	        }
    	}
    	afterEvaluate {
	        classDirectories = files(classDirectories.files.collect {
	            fileTree(dir: it,
	                    exclude: [
	                    	// exclude exception packages from code coverage
	                    	'**/exceptions/**', 
	                    	// exclude benchmark packages from code coverage
	                    	'**/benchmarks/**'
	                    
	                    ]) 
	        })
   		}
	}

	jar { manifest.attributes provider: 'chronos.org' }
	
	findbugs {
	    toolVersion = project.findbugsVersion
		ignoreFailures = true
		reportsDir = file("$project.buildDir/findbugsReports")
		effort = 'max'
		omitVisitors = ['SerializableIdiom']
	}

		task javadocJar(type: Jar) {
	    classifier = 'javadoc'
	    from javadoc
	}
	
	task sourcesJar(type: Jar) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	artifacts {
    	archives javadocJar, sourcesJar
	}
	
	signing {
   		sign configurations.archives
	}
	
	/* uploadArchives {
	  repositories {
	    mavenDeployer {
	      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	
	      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
	        authentication(userName: ossrhUsername, password: ossrhPassword)
	      }
	
	      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
	        authentication(userName: ossrhUsername, password: ossrhPassword)
	      }
	
	      pom.project {
	        name 'Chronos'
	        packaging 'jar'
	        // optionally artifactId can be defined here 
	        description 'Versioned data storage, embeddable and easy to use.'
	        url 'https://github.com/MartinHaeusler/chronos'
	
	        scm {
	          connection 'scm:git:https://github.com/MartinHaeusler/chronos'
	          developerConnection 'scm:git:https://github.com/MartinHaeusler/chronos'
	          url 'https://github.com/MartinHaeusler/chronos'
	        }
	
	        licenses {
	          license {
	            name 'GNU Affero General Public License v3'
	            url 'https://www.gnu.org/licenses/agpl-3.0.txt'
	          }
	        }
	
	        developers {
	          developer {
	            id 'martin.haeusler'
	            name 'Martin HÃ¤usler'
	            email 'martin.haeusler89@gmail.com'
	          }
	        }
	      }
	    }
	  }
	}*/
}

test.dependsOn = subprojects.test
clean.dependsOn = subprojects.clean

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}
